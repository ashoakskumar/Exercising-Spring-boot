Configuration:- 
1. @ConfigurationProperties is used for external configuration, to inject property value from property file to a class.
	1.1 This annotation has following property	
		ignoreInvalidFields, ignoreUnknownFields, prefix, value
	1.2 Example
		-- model class
		@Component
		@ConfigurationProperties
		public class Team {
			private String team;
			private int teamSize;
			private String teamLeader;
				
				//Setters and Getters

			public String toString() {
				return "Team:" + team + " - " + teamSize + " - " + teamLeader;
			}
		} 
		-- myteam.properties
		
		team=XYZ Team
		team-size=3
		team-leader=Mahesh 
		
		-- config class
		
		@Configuration
		@PropertySource("classpath:team.properties")
		public class ConfigService {

			@Bean("team1")
			public Team getTeam() {
				return new Team();
			}
		}
		-- main spring boot class
		final ApplicationContext ctx = SpringApplication.run(SpringBootConfigurationApplication.class, args);
		final Team team = ctx.getBean("team1",Team.class);
		System.out.println("--- Team ---");
		System.out.println(team);
		
	1.3 if component annotation not present in the @ConfigurationProperties then @EnableConfigurationProperties(Team.class) in boot class
2. @Configuration
	2.1 it indicates that a class declared with one or more @Bean methods and spring containers process those methods on runtime with defined bean definition
	2.2 public class Person {
			private String name;
			private int age;
		}
		
		-- config files
		
			@Bean("person1")
		public Person getPerson1() {
			Person person = new Person();
			person.setAge(25);
			person.setName("Kumar");
			return person;
		}
		@Bean("person2")
		public Person getPerson2() {
			Person person = new Person();
			person.setAge(30);
			person.setName("vimal");
			return person;
		}
		
		-main class
			final Person person1 = ctx.getBean("person1",Person.class);
		System.out.println("--- Person1 ---");
		System.out.println(person1);
		final Person person2 = ctx.getBean("person2",Person.class);
		System.out.println("--- Person2 ---");
		System.out.println(person2);
